/*******************************************************************************
 *     termsat SAT solver
 *     Copyright (C) 2010 Ted Stockwell <emorning@yahoo.com>
 * 
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as
 *     published by the Free Software Foundation, either version 3 of the
 *     License, or (at your option) any later version.
 * 
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 * 
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
using TermSAT.Formulas;

namespace TermSAT.Solver
{

    /**
     * A tool for determining the satisfiability of boolean expressions 
     * that uses the reduction rule database generated by the RuleGenerator
     * RuleIndexer utilities.
     * 
     * @author Ted Stockwell <emorning@yahoo.com>
     */
    public class Solver
    {

        public static Solver FAUX_SOLVER = new FauxSolver();

//    public static void main(string[] args) {
//		string file = ArgUtils.getString(args, "file", true);
//        CNFFile cnf = CNFFile.read(new FileInputStream(file));

//        Solver solver = new Solver(new RuleRepository());
//        Formula reducedForm = solver.reduce(cnf.getFormula());

//    // produce output according to rules here:
//    // 	http://www.satcompetition.org/2004/format-solvers2004.html
//    int status;
//		if (Constant.FALSE.equals(reducedForm)) {
//			System.out.println("s UNSATISFIABLE");
//    status= 20;
//		}
//		else {
//			System.out.println("s SATISFIABLE");
//printSatisfyingValuation(reducedForm);
//status= 10;
//		}
//		System.exit(status);
//	}
	
	readonly private RuleRepository _ruleDatabase;

/*
 * cache of reduction results.
 * Used to avoid repeatedly reducing the same formula
 */
static sealed private class RefEntry { Formula reduction; FormulaReference reference; }
const HashMap<Integer, RefEntry> _reductionCache = new HashMap<Integer, RefEntry>();
const private ReferenceQueue<Formula> _referenceQueue = new ReferenceQueue<Formula>();
private class FormulaReference extends SoftReference<Formula> {
    Integer _formulaHashCode;

        public FormulaReference(Formula referent)
{
    super(referent, _referenceQueue);
    _formulaHashCode = referent.hashCode();
}
	}
	
	
	public Solver(RuleRepository ruleDatabase)
{
    _ruleDatabase = ruleDatabase;
}

    private Solver()
    {
        _ruleDatabase = null;
    }



    private static void printSatisfyingValuation(Formula reducedForm)
    {
        throw new RuntimeException("Unfinished");

    }

    /**
     * Returns a formula that is reduced as much as possible using the 
     * reduction rules in the rule database.
     * @return A reduced formula.  May simply return the given formula if it can't be reduced. 
     */
    public Formula reduce(Formula formula)
    {
        Formula original = formula;

        while (true)
        {
            Formula cached = checkCache(formula);
            if (cached != null)
                return cached;

            /// variable and constants can't be reduced
            if (formula is Variable || formula is Constant)
                return formula;


            //
            // reduce subformulas before reducing this formula
            //
            if (formula is Negation)
            {
                Formula negated = ((Negation)formula).getChild();
                Formula n = reduce(negated);
                if (!negated.equals(n))
                    formula = Formula.createNegation(n);
            }
            else if (formula is Implication)
            {
                Implication implication = (Implication)formula;
                Formula antecent = implication.getAntecedent();
                Formula consequent = implication.getConsequent();
                Formula a = reduce(antecent);
                Formula c = reduce(consequent);
                if (!a.equals(antecent) || !c.equals(consequent))
                    formula = Formula.createImplication(a, c);
            }

            Formula reduced = applyRules(formula);
            if (reduced.equals(formula))
            {
                addToCache(original, formula);
                return formula; // formula not reduced, no more to do
            }
            formula = reduced; continue; // formula reduced, go around again
        }
    }

    /**
     * Only applies rules to the given formula, not subformulas
     * @returns the reduced rule if a rule applied, else the given rule.
     */
    private Formula applyRules(Formula formula)
    {
        Formula reducedFormula = _ruleDatabase.findReducedFormula(formula);
        if (reducedFormula == null)
            reducedFormula = formula;
        //System.out.println("Applied rule "+rule.getFormulaText()+"==>"+canonicalForm);			
        //System.out.println("To formula "+formula);			
        //System.out.println("Reduced to "+reducedFormula);			

        return reducedFormula;
    }

    private synchronized Formula checkCache(Formula formula)
    {
        cleanCache();
        RefEntry entry = _reductionCache.get(formula.hashCode());
        if (entry == null)
            return null;
        if (entry.reference.get() != formula)
        {
            _reductionCache.remove(formula.hashCode());
            return null;
        }
        return entry.reduction;
    }

    private synchronized void addToCache(Formula formula, Formula reduction)
    {
        RefEntry entry = new RefEntry();
        entry.reduction = reduction;
        entry.reference = new FormulaReference(formula);
        _reductionCache.put(formula.hashCode(), entry);
        cleanCache();
    }
    private synchronized void cleanCache()
    {
        // clean up expired references
        FormulaReference ref;
        while ((ref= (FormulaReference)_referenceQueue.poll()) != null) {
            _reductionCache.remove(ref._formulaHashCode);
        }
    }
}

public class FauxSolver : Solver
{
            override public Formula reduce(Formula formula)
            {
                return formula;
            }

}

}

